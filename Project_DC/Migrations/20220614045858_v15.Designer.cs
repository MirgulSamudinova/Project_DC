// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Project_DC.Models;

#nullable disable

namespace Project_DC.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220614045858_v15")]
    partial class v15
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Project_DC.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HealthData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientsServices");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsTooth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientsServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("ToothId")
                        .HasColumnType("integer");

                    b.Property<int>("ToothStateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientsServiceId");

                    b.HasIndex("ToothId");

                    b.HasIndex("ToothStateId");

                    b.ToTable("ClientsTeeth");
                });

            modelBuilder.Entity("Project_DC.Models.DaysOfWeek", b =>
                {
                    b.Property<int>("DaysOfWeekID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DaysOfWeekID"));

                    b.Property<string>("DaysOfWeekName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DaysOfWeekID");

                    b.ToTable("DaysOfWeek");
                });

            modelBuilder.Entity("Project_DC.Models.DentalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DentalServiceGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsToothService")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DentalServiceGroupId");

                    b.ToTable("DentalServices");
                });

            modelBuilder.Entity("Project_DC.Models.DentalServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DentalServiceGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DentalServiceGroups");
                });

            modelBuilder.Entity("Project_DC.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Project_DC.Models.Genders", b =>
                {
                    b.Property<int>("id_gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_gender"));

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_gender");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Project_DC.Models.GeneralService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientsServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DentalServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClientsServiceId");

                    b.HasIndex("DentalServiceId");

                    b.ToTable("GeneralService");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GeneralService");
                });

            modelBuilder.Entity("Project_DC.Models.Materials", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<double>("summ_price")
                        .HasColumnType("double precision");

                    b.Property<int>("unit")
                        .HasColumnType("integer");

                    b.HasKey("MaterialId");

                    b.HasIndex("unit");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Project_DC.Models.Patients", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("e_mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PatientId");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Project_DC.Models.Positions", b =>
                {
                    b.Property<int>("Id_position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_position"));

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id_position");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Project_DC.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Project_DC.Models.Rooms", b =>
                {
                    b.Property<int>("RoomsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomsId"));

                    b.Property<string>("RoomsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoomsId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Project_DC.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int?>("Staffsid_staff")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("withDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ScheduleId");

                    b.HasIndex("Staffsid_staff");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Project_DC.Models.ScheduleTemplate", b =>
                {
                    b.Property<int>("TmeplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TmeplateId"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("withTime")
                        .HasColumnType("interval");

                    b.HasKey("TmeplateId");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("StaffId");

                    b.ToTable("ScheduleTemplate");
                });

            modelBuilder.Entity("Project_DC.Models.Services", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdService"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("idGroup")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<string>("typeService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdService");

                    b.HasIndex("idGroup");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Project_DC.Models.ServicesGroup", b =>
                {
                    b.Property<int>("IdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGroup"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdGroup");

                    b.ToTable("ServicesGroup");
                });

            modelBuilder.Entity("Project_DC.Models.Staffs", b =>
                {
                    b.Property<int>("id_staff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_staff"));

                    b.Property<DateTime>("birth_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("e_mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_gender")
                        .HasColumnType("integer");

                    b.Property<int>("id_position")
                        .HasColumnType("integer");

                    b.Property<string>("middle_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("mobile_number")
                        .HasColumnType("integer");

                    b.Property<string>("sure_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_staff");

                    b.HasIndex("id_gender");

                    b.HasIndex("id_position");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Project_DC.Models.Tooth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToothSectorId")
                        .HasColumnType("integer");

                    b.Property<int>("ToothTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToothSectorId");

                    b.HasIndex("ToothTypeId");

                    b.ToTable("Teeth");
                });

            modelBuilder.Entity("Project_DC.Models.ToothSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSector")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ToothSectors");
                });

            modelBuilder.Entity("Project_DC.Models.ToothState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ToothStateColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToothStateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ToothStates");
                });

            modelBuilder.Entity("Project_DC.Models.ToothType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ToothTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ToothTypes");
                });

            modelBuilder.Entity("Project_DC.Models.Units", b =>
                {
                    b.Property<int>("UnitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitsId"));

                    b.Property<string>("UnitsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UnitsId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Project_DC.Models.ToothService", b =>
                {
                    b.HasBaseType("Project_DC.Models.GeneralService");

                    b.Property<int>("ClientsToothId")
                        .HasColumnType("integer");

                    b.HasIndex("ClientsToothId");

                    b.HasDiscriminator().HasValue("ToothService");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsService", b =>
                {
                    b.HasOne("Project_DC.Models.Client", "_Client")
                        .WithMany("ClientsServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Client");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsTooth", b =>
                {
                    b.HasOne("Project_DC.Models.Client", "_Client")
                        .WithMany("ClientsTeeth")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_DC.Models.ClientsService", null)
                        .WithMany("ClientsTeeth")
                        .HasForeignKey("ClientsServiceId");

                    b.HasOne("Project_DC.Models.Tooth", "_Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_DC.Models.ToothState", "_ToothState")
                        .WithMany()
                        .HasForeignKey("ToothStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Client");

                    b.Navigation("_Tooth");

                    b.Navigation("_ToothState");
                });

            modelBuilder.Entity("Project_DC.Models.DentalService", b =>
                {
                    b.HasOne("Project_DC.Models.DentalServiceGroup", "_DentalServiceGroup")
                        .WithMany()
                        .HasForeignKey("DentalServiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_DentalServiceGroup");
                });

            modelBuilder.Entity("Project_DC.Models.GeneralService", b =>
                {
                    b.HasOne("Project_DC.Models.ClientsService", null)
                        .WithMany("Services")
                        .HasForeignKey("ClientsServiceId");

                    b.HasOne("Project_DC.Models.DentalService", "_DentalService")
                        .WithMany()
                        .HasForeignKey("DentalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_DentalService");
                });

            modelBuilder.Entity("Project_DC.Models.Materials", b =>
                {
                    b.HasOne("Project_DC.Models.Units", "Units")
                        .WithMany()
                        .HasForeignKey("unit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Project_DC.Models.Patients", b =>
                {
                    b.HasOne("Project_DC.Models.Genders", "Genders")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genders");
                });

            modelBuilder.Entity("Project_DC.Models.Schedule", b =>
                {
                    b.HasOne("Project_DC.Models.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("Staffsid_staff");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Project_DC.Models.ScheduleTemplate", b =>
                {
                    b.HasOne("Project_DC.Models.DaysOfWeek", "DaysOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeek")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_DC.Models.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaysOfWeek");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Project_DC.Models.Services", b =>
                {
                    b.HasOne("Project_DC.Models.ServicesGroup", "ServicesGroup")
                        .WithMany()
                        .HasForeignKey("idGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicesGroup");
                });

            modelBuilder.Entity("Project_DC.Models.Staffs", b =>
                {
                    b.HasOne("Project_DC.Models.Genders", "Genders")
                        .WithMany()
                        .HasForeignKey("id_gender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_DC.Models.Positions", "Positions")
                        .WithMany()
                        .HasForeignKey("id_position")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genders");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Project_DC.Models.Tooth", b =>
                {
                    b.HasOne("Project_DC.Models.ToothSector", "_ToothSector")
                        .WithMany()
                        .HasForeignKey("ToothSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_DC.Models.ToothType", "_ToothType")
                        .WithMany()
                        .HasForeignKey("ToothTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_ToothSector");

                    b.Navigation("_ToothType");
                });

            modelBuilder.Entity("Project_DC.Models.ToothService", b =>
                {
                    b.HasOne("Project_DC.Models.ClientsTooth", "_ClientsTooth")
                        .WithMany("ToothServices")
                        .HasForeignKey("ClientsToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_ClientsTooth");
                });

            modelBuilder.Entity("Project_DC.Models.Client", b =>
                {
                    b.Navigation("ClientsServices");

                    b.Navigation("ClientsTeeth");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsService", b =>
                {
                    b.Navigation("ClientsTeeth");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Project_DC.Models.ClientsTooth", b =>
                {
                    b.Navigation("ToothServices");
                });
#pragma warning restore 612, 618
        }
    }
}
